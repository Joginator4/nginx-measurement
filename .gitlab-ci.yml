image: dtzar/helm-kubectl


stages:
  - build
  - integration
  - deploy
  - cleanup_on_failure
  - cleanup

variables:
  MASTER_KEY: $MASTER_NODE_PRIVATE_KEY
  MICROSERVICE_DIRECTORY: ""
  MICROSERVICE_NAME: ""
  MICROSERVICE_IMAGE_NAME: $CI_REGISTRY_IMAGE/$MICROSERVICE_NAME
  MICROSERVICE_REPO: "https://github.com/Joginator4/nginx-measurement.git"
  MICROSERVICE_IMAGE_VERSION: "1.0.0"
  NGINX_CHART_NAME:  nginx-server
  GOBENCH_CHART_NAME: gobench-client
  BASTION_LOG_FOLDER: "/home/vagrant/logs/nginx_measurement"
  CHART_FOLDER: ""

#IMAGE BUILD

.build_image:
  stage: build
  tags:
    - bastion
    - shell
  only:
    changes:
      - "*/Dockerfile"
  before_script:
    - ls
  script:
    - echo "Logging to CR"; docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - cd $MICROSERVICE_DIRECTORY
    - docker build -t $MICROSERVICE_IMAGE_NAME/$MICROSERVICE_IMAGE_VERSION .
    - docker push $MICROSERVICE_IMAGE_NAME/$MICROSERVICE_IMAGE_VERSION

build_nginx:
  extends:
    - .build_image
  variables:
    MICROSERVICE_NAME: nginx
    MICROSERVICE_DIRECTORY: nginx


build_gobench:
  extends:
    - .build_image
  variables:
    MICROSERVICE_NAME: gobench
    MICROSERVICE_DIRECTORY: gobench

### Integrate repo on server with cluster

env_integration:
  stage: integration
  tags:
    - agent
    - kubernetes
  script:
      - |-
          ls
          echo "Creating docker registry and cloning repo"
          kubectl get pods
          kubectl create secret docker-registry microservice-docker-registry --docker-server=$CI_REGISTRY --docker-username=$CI_REGISTRY_USER --docker-password=$CI_REGISTRY_PASSWORD --dry-run=client -o yaml | kubectl apply -f -


.run_nginx_server:
  stage: deploy
  needs:
    - env_integration
  tags:
    - kubernetes
    - agent
  before_script:
    - export KUBECONFIG=$KUBERNETES_CONF
    - cat $MASTER_KEY | sed -e "s/-----BEGIN OPENSSH PRIVATE KEY-----/&\n/" -e "s/-----END OPENSSH PRIVATE KEY-----/&\n/" -e "s/\S\{64\}/&\n/g"\ > deploy-key.pem
    - chmod 400 deploy-key.pem
  script:
      - |-
          cd $MICROSERVICE_DIRECTORY &&
          helm install $NGINX_CHART_NAME --set .imageCredentials.registry=$CI_REGISTRY --set .imageCredentials.username=$CI_REGISTRY_USER --set .image.Credentials.password=$CI_REGISTRY_PASSWORD --set .containers.tag=$MICROSERVICE_IMAGE_VERSION  $CHART_FOLDER
          echo "Waiting for $NGINX_CHART_NAME to be running";sleep 40
          if kubectl get pods -l app=nginx | grep "Running"; then
            echo "$NGINX_CHART_NAME is running Successfuly!"
          else
            echo "$NGINX_CHART_NAME is not running Succesfully."
            exit 2
          fi
.run_gobench_client:
  stage: deploy
  tags:
    - kubernetes
    - agent
  needs:
    - env_integration
    - run_nginx_server
  before_script:
    - export KUBECONFIG=$KUBERNETES_CONF
    - cat $MASTER_KEY | sed -e "s/-----BEGIN OPENSSH PRIVATE KEY-----/&\n/" -e "s/-----END OPENSSH PRIVATE KEY-----/&\n/" -e "s/\S\{64\}/&\n/g"\ > deploy-key.pem
    - chmod 400 deploy-key.pem
    - export SERVER_IP=$(kubectl get pods -l app=nginx -o json | jq '.items[] | .status | .podIP' | tr -d '"')
  script:
      - |-
          cd $MICROSERVICE_DIRECTORY &&
          helm install $GOBENCH_CHART_NAME --set env.SERVER_IP=$SERVER_IP --set folder.name=$BASTION_LOG_FOLDER --set imageCredentials.registry=$CI_REGISTRY --set imageCredentials.username=$CI_REGISTRY_USER --set imageCredentials.password=$CI_REGISTRY_PASSWORD --set containers.image_tag=$MICROSERVICE_IMAGE_VERSION --set sshpass.rsync_server_ip=$BASTION_IP_ADDRESS --set sshpass.rsync_server_login=$BASTION_LOGIN --set sshpass.rsync_server_password=$BASTION_PASSWORD $CHART_FOLDER
          echo "Waiting for $GOBENCH_CHART_NAME to be running";sleep 40
          if kubectl get pods | grep "$GOBENCH_CHART_NAME"; then
            echo "$GOBENCH_CHART_NAME is running Successfuly!"
          else
            echo "$GOBENCH_CHART_NAME is not running Succesfully."
            exit 2
          fi

run_nginx_server:
  extends:
    - .run_nginx_server
  variables:
    MICROSERVICE_DIRECTORY: nginx
    CHART_FOLDER: nginx-server/


run_gobench_client:
  extends:
    - .run_gobench_client
  variables:
    MICROSERVICE_DIRECTORY: gobench
    CHART_FOLDER: gobench-client/

cleanup_on_failure:
  tags:
    - kubernetes
    - agent
  stage: cleanup_on_failure
  rules:
    - exists:
      - run_nginx_server
      - run_gobench_client
    - when: on_failure
  before_script:
    - export KUBECONFIG=$KUBERNETES_CONF
  script:
      - |-
          echo "Deploying Measurement test failed, uninstalling ..."
          helm uninstall $NGINX_CHART_NAME $GOBENCH_CHART_NAME

undeploy_test:
  stage: cleanup
  tags:
    - kubernetes
    - agent
  needs:
    - run_gobench_client
  when: delayed
  start_in: 3 minutes
  before_script:
    - export KUBECONFIG=$KUBERNETES_CONF
  script:
      - |-
          if kubectl get jobs -l app=gobench-client | grep "1/1"; then
            echo "Measurement of RPS by $GOBENCH_CHART_NAME completed!"
            helm uninstall $GOBENCH_CHART_NAME $NGINX_CHART_NAME
          else
            echo "ERROR!, $GOBENCH_CHART_NAME not completed successfully"
          fi


# undeploy_charts:
#   stage: undeploy
#   tags:
#     - kubernetes
#     - agent
#   needs:
#     - check_result_transfer
#   before_script:
#     - export KUBECONFIG=$KUBERNETES_CONF
#     - echo "Removing helm charts after checking that results are in bastion host"
#   script:
#         - |-
#             helm uninstall $GOBENCH_CHART_NAME $NGINX_CHART_NAME

# remove_after_run:
#   stage: undeploy
#   dependencies:
#     - env_integration
#     - run_nginx_server
#     - run_gobench_client
#   before_script:
#     - export KUBECONFIG=/home/vagrant/.kube/config
#     - cat $MASTER_KEY | sed -e "s/-----BEGIN OPENSSH PRIVATE KEY-----/&\n/" -e "s/-----END OPENSSH PRIVATE KEY-----/&\n/" -e "s/\S\{64\}/&\n/g"\ > deploy-key.pem
#     - chmod 400 deploy-key.pem
#     - export SERVER_IP=$(kubectl get pods -l app=nginx -o json | jq '.items[] | .status | .podIP' | tr -d '"')
#   script:
#       - |-
#           ssh -tt -o StrictHostKeyChecking=no -i deploy-key.pem vagrant@$MASTER_IP_ADDRESS "
#           helm uninstall $NGINX_CHART_NAME $GOBENCH_CHART_NAME
#            scp -q -o StrictHostKeyChecking=no -r $BASTION_LOGIN@$BASTION_IP_ADDRESS:$CI_BUILDS_DIR/nginx-measurement vagrant@$MASTER_IP_ADDRESS:~

#            docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY &&
#kubectl create secret docker-registry microservice-docker-registry --docker-server=$CI_REGISTRY --docker-username=$CI_REGISTRY_USER --docker-password=$CI_REGISTRY_PASSWORD --dry-run=client -o yaml | kubectl apply -f - &&
#         - ls -la
##         - cd $MICROSERVICE_DIRECTORY
###         - helm install nginx-server nginx-server/ &&
# 